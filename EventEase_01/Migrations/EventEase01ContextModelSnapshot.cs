// <auto-generated />
using System;
using EventEase_01.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventEase_01.Migrations
{
    [DbContext(typeof(EventEase01Context))]
    partial class EventEase01ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EventEase_01.Models.Booking", b =>
                {
                    b.Property<Guid>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Booking_ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("BookingDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("Booking_DateTime");

                    b.Property<int?>("NumberOfBookings")
                        .HasColumnType("int")
                        .HasColumnName("Number_Of_Bookings");

                    b.Property<Guid?>("TicketId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Ticket_ID");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("User_ID");

                    b.HasKey("BookingId")
                        .HasName("PK__Booking__35ABFDE0CBA755AB");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Booking", (string)null);
                });

            modelBuilder.Entity("EventEase_01.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Category_ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("CategoryDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Category_Description");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Category_Name");

                    b.HasKey("CategoryId")
                        .HasName("PK__Category__6DB38D4E558E5175");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("EventEase_01.Models.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Event_ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Category_ID");

                    b.Property<DateTime?>("EventDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("Event_Date");

                    b.Property<string>("EventDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Event_Description");

                    b.Property<string>("EventImageFileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Event_Name");

                    b.Property<Guid?>("VenueId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Venue_ID");

                    b.HasKey("EventId")
                        .HasName("PK__Event__FD6BEFE402244B4C");

                    b.HasIndex("CategoryId");

                    b.HasIndex("VenueId");

                    b.ToTable("Event", (string)null);
                });

            modelBuilder.Entity("EventEase_01.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Order_ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("OrderDateTime")
                        .HasColumnType("datetime")
                        .HasColumnName("Order_DateTime");

                    b.Property<string>("PaymentStatus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Payment_Status");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("User_ID");

                    b.HasKey("OrderId")
                        .HasName("PK__Order__F1E4639B1DF67503");

                    b.HasIndex("UserId");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("EventEase_01.Models.Seat", b =>
                {
                    b.Property<Guid>("SeatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Seat_ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool?>("SeatAvailability")
                        .HasColumnType("bit")
                        .HasColumnName("Seat_Availability");

                    b.Property<bool?>("SeatBookingStatus")
                        .HasColumnType("bit")
                        .HasColumnName("Seat_Booking_Status");

                    b.Property<string>("SeatNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Seat_Number");

                    b.Property<decimal?>("SeatPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("Seat_Price");

                    b.Property<Guid?>("VenueId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Venue_ID");

                    b.HasKey("SeatId")
                        .HasName("PK__Seat__8B2CE7B635A7C5BC");

                    b.HasIndex("VenueId");

                    b.ToTable("Seat", (string)null);
                });

            modelBuilder.Entity("EventEase_01.Models.Ticket", b =>
                {
                    b.Property<Guid>("TicketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Ticket_ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid?>("EventId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Event_ID");

                    b.Property<int?>("TicketAvailability")
                        .HasColumnType("int")
                        .HasColumnName("Ticket_Availability");

                    b.Property<decimal?>("TicketPrice")
                        .HasColumnType("decimal(10, 2)")
                        .HasColumnName("Ticket_Price");

                    b.HasKey("TicketId")
                        .HasName("PK__Ticket__ED7260D95D47BECD");

                    b.HasIndex("EventId");

                    b.ToTable("Ticket", (string)null);
                });

            modelBuilder.Entity("EventEase_01.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("User_ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password_hash");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Password_Salt");

                    b.Property<int?>("UserAge")
                        .HasColumnType("int")
                        .HasColumnName("User_Age");

                    b.Property<string>("UserEmail")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("User_Email");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserRole")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("User_Role");

                    b.HasKey("UserId")
                        .HasName("PK__User__206D9190B4194A1C");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("EventEase_01.Models.Venue", b =>
                {
                    b.Property<Guid>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Venue_ID")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("VenueAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Venue_Address");

                    b.Property<int?>("VenueCapacity")
                        .HasColumnType("int")
                        .HasColumnName("Venue_Capacity");

                    b.Property<string>("VenueName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("Venue_Name");

                    b.HasKey("VenueId")
                        .HasName("PK__Venue__4A99C4B9FB0273EE");

                    b.ToTable("Venue", (string)null);
                });

            modelBuilder.Entity("EventEase_01.Models.Booking", b =>
                {
                    b.HasOne("EventEase_01.Models.Ticket", "Ticket")
                        .WithMany("Bookings")
                        .HasForeignKey("TicketId")
                        .HasConstraintName("FK__Booking__Ticket___5CD6CB2B");

                    b.HasOne("EventEase_01.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Booking__User_ID__5BE2A6F2");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventEase_01.Models.Event", b =>
                {
                    b.HasOne("EventEase_01.Models.Category", "Category")
                        .WithMany("Events")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK__Event__Category___5441852A");

                    b.HasOne("EventEase_01.Models.Venue", "Venue")
                        .WithMany("Events")
                        .HasForeignKey("VenueId")
                        .HasConstraintName("FK__Event__Venue_ID__534D60F1");

                    b.Navigation("Category");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("EventEase_01.Models.Order", b =>
                {
                    b.HasOne("EventEase_01.Models.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Order__User_ID__60A75C0F");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventEase_01.Models.Seat", b =>
                {
                    b.HasOne("EventEase_01.Models.Venue", "Venue")
                        .WithMany("Seats")
                        .HasForeignKey("VenueId")
                        .HasConstraintName("FK__Seat__Venue_ID__6477ECF3");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("EventEase_01.Models.Ticket", b =>
                {
                    b.HasOne("EventEase_01.Models.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .HasConstraintName("FK__Ticket__Event_ID__5812160E");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("EventEase_01.Models.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("EventEase_01.Models.Event", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("EventEase_01.Models.Ticket", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("EventEase_01.Models.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("EventEase_01.Models.Venue", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Seats");
                });
#pragma warning restore 612, 618
        }
    }
}
